# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

# Finding and customizing actions:
# https://docs.github.com/en/actions/learn-github-actions/finding-and-customizing-actions

name: Test & Deploy to Amazon ECS

on:
  push:
    tags:
      - deploy-*

jobs:
  build-for-tests:
    name: Build For Tests
    runs-on: ubuntu-latest
    environment: test

    steps:
      - name: Checkout
        uses: appleboy/ssh-action@v1.0.3 # https://github.com/marketplace/actions/ssh-remote-commands
        env:
          SHA: ${{ github.sha }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          envs: SHA
          script: |
            cd gumroad-jd-test2
            git fetch --all
            git checkout $SHA

      - name: Build
        uses: appleboy/ssh-action@v1.0.3 # https://github.com/marketplace/actions/ssh-remote-commands
        env:
          IMAGE: test2:${{ github.sha }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          envs: IMAGE
          script: |
            cd gumroad-jd-test2
            docker build -f github-workflows/Dockerfile -t $IMAGE ./webapp
            docker run --rm --volume ./webapp:/app --workdir /app --user appserver --env CI=true $IMAGE yarn install

  test-jest:
    name: Run Jest Tests
    needs: build-for-tests
    runs-on: ubuntu-latest
    environment: test

    steps:
      - name: Run tests
        uses: appleboy/ssh-action@v1.0.3 # https://github.com/marketplace/actions/ssh-remote-commands
        env:
          IMAGE: test2:${{ github.sha }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          envs: IMAGE
          script: |
            cd gumroad-jd-test2
            docker run --rm --volume ./webapp:/app --workdir /app --user appserver --env CI=true $IMAGE ./node_modules/.bin/jest

  test-rails-test:
    name: Run rails test
    needs: build-for-tests
    runs-on: ubuntu-latest
    environment: test

    steps:
      - name: Run tests
        uses: appleboy/ssh-action@v1.0.3 # https://github.com/marketplace/actions/ssh-remote-commands
        env:
          IMAGE: test2:${{ github.sha }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          envs: IMAGE
          script: |
            cd gumroad-jd-test2
            docker run --rm --volume ./webapp:/app --workdir /app --user appserver --env CI=true $IMAGE ./bin/rails test

  test-rails-test-system:
    name: Run rails test:system
    needs: build-for-tests
    runs-on: ubuntu-latest
    environment: test

    steps:
      - name: Run tests
        uses: appleboy/ssh-action@v1.0.3 # https://github.com/marketplace/actions/ssh-remote-commands
        env:
          IMAGE: test2:${{ github.sha }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          envs: IMAGE
          script: |
            cd gumroad-jd-test2
            docker run --rm --volume ./webapp:/app --workdir /app --user appserver --env CI=true $IMAGE ./bin/rails test:system

  deploy-staging:
    name: Deploy to staging
    needs: [test-jest, test-rails-test, test-rails-test-system]
    runs-on: ubuntu-latest
    environment: test

    steps:
      - name: Checkout
        uses: appleboy/ssh-action@v1.0.3 # https://github.com/marketplace/actions/ssh-remote-commands
        env:
          SHA: ${{ github.sha }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          envs: SHA
          script: |
            cd gumroad-jd-staging
            git fetch --all
            git checkout $SHA

      - name: Build
        uses: appleboy/ssh-action@v1.0.3 # https://github.com/marketplace/actions/ssh-remote-commands
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd gumroad-jd-staging
            source .env-linode-staging
            export RAILS_MASTER_KEY
            docker compose -f docker-compose-linode-staging.yml build appserver-linode-staging

      - name: Deploy
        uses: appleboy/ssh-action@v1.0.3 # https://github.com/marketplace/actions/ssh-remote-commands
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd gumroad-jd-staging
            docker compose -f docker-compose-linode-staging.yml down appserver-linode-staging
            docker compose -f docker-compose-linode-staging.yml up -d appserver-linode-staging

  smoke-test:
    name: Smoke test staging
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: test

    steps:
      - name: Run smoke test
        uses: appleboy/ssh-action@v1.0.3 # https://github.com/marketplace/actions/ssh-remote-commands
        env:
          IMAGE: smoke-test-runner:${{ github.sha }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          envs: IMAGE
          script: |
            cd gumroad-jd-staging
            docker build -f github-workflows/Dockerfile -t $IMAGE ./smoke-test-runner
            docker run --rm --volume ./smoke-test-runner:/app --workdir /app --user appserver --network smoke-test-network $IMAGE ./bin/rails test:system

  deploy-production:
    name: Deploy to production
    needs: smoke-test
    runs-on: ubuntu-latest
    environment: test

    steps:
      - name: Checkout
        uses: appleboy/ssh-action@v1.0.3 # https://github.com/marketplace/actions/ssh-remote-commands
        env:
          SHA: ${{ github.sha }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          envs: SHA
          script: |
            cd gumroad-jd-production
            git fetch --all
            git checkout $SHA

      - name: Build
        uses: appleboy/ssh-action@v1.0.3 # https://github.com/marketplace/actions/ssh-remote-commands
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd gumroad-jd-production
            source .env-linode-production
            export RAILS_MASTER_KEY
            docker compose -f docker-compose-linode-production.yml build appserver-linode-production

      - name: Deploy
        uses: appleboy/ssh-action@v1.0.3 # https://github.com/marketplace/actions/ssh-remote-commands
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd gumroad-jd-production
            docker compose -f docker-compose-linode-production.yml down appserver-linode-production
            docker compose -f docker-compose-linode-production.yml up -d appserver-linode-production
