gumroad-jd-prototype
https://dashboard.heroku.com/apps/gumroad-jd-prototype/settings

gumroad-jd
https://dashboard.heroku.com/apps/gumroad-jd/settings

To Deploy (and deploy settings)
https://dashboard.heroku.com/apps/gumroad-jd/deploy/github

first-test-pipeline
https://dashboard.heroku.com/pipelines/812693d3-99ac-4090-9dcb-2f7cb0924ffc


AWS access portal URL
https://d-9067f88fdd.awsapps.com/start


my public ip: 104.192.232.55


curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
sudo apt install unzip
unzip awscliv2.zip
sudo aws/install
complete -C '/usr/local/bin/aws_completer' aws
aws configure sso
# start url: https://d-9067f889d1.awsapps.com/start
# region: us-east-1
export AWS_PROFILE=AdministratorAccess-711112755670
aws s3 ls
aws s3 ls --profile AdministratorAccess-711112755670


aws ecr describe-repositories
{
    "repositories": [
        {
            "repositoryArn": "arn:aws:ecr:us-east-1:711112755670:repository/gumroad-jd",
            "registryId": "711112755670",
            "repositoryName": "gumroad-jd",
            "repositoryUri": "711112755670.dkr.ecr.us-east-1.amazonaws.com/gumroad-jd",
            "createdAt": "2024-03-01T01:59:40.587000+00:00",
            "imageTagMutability": "MUTABLE",
            "imageScanningConfiguration": {
                "scanOnPush": false
            },
            "encryptionConfiguration": {
                "encryptionType": "AES256"
            }
        }
    ]
}

https://docs.aws.amazon.com/AmazonECS/latest/developerguide/create-container-image.html

docker build -t hello-world .

# docker tag hello-world aws_account_id.dkr.ecr.region.amazonaws.com/hello-repository
docker tag hello-world 711112755670.dkr.ecr.us-east-1.amazonaws.com/gumroad-jd

# aws ecr get-login-password --region region | docker login --username AWS --password-stdin aws_account_id.dkr.ecr.region.amazonaws.com
aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 711112755670.dkr.ecr.us-east-1.amazonaws.com

# docker push aws_account_id.dkr.ecr.region.amazonaws.com/hello-repository
docker push 711112755670.dkr.ecr.us-east-1.amazonaws.com/gumroad-jd


docker.io/library/mysql:8.0.36-debian



RDS mysql
    https://us-east-1.console.aws.amazon.com/rds/home?region=us-east-1#database:id=db;is-cluster=false
hostname
    db.cbc0ceux1sr1.us-east-1.rds.amazonaws.com
master
    username: admin
    password: Go_For_It_2024

mysql -u admin -p -h db.cbc0ceux1sr1.us-east-1.rds.amazonaws.com



EC2

sudo apt update

curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo aws/install
complete -C '/usr/local/bin/aws_completer' aws

sudo apt install -y docker.io docker-compose unzip
ssh-keygen
cat .ssh/id_rsa.pub
sudo vi /etc/group
git clone git@github.com:desm/gumroad-jd.git
cd gumroad-jd/server
cat > config/master.key
source .autoenv
aws configure sso
# start url: https://d-9067f889d1.awsapps.com/start
# region: us-east-1
export AWS_PROFILE=AdministratorAccess-711112755670

build-prod
aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 711112755670.dkr.ecr.us-east-1.amazonaws.com
docker tag server_appserver:latest 711112755670.dkr.ecr.us-east-1.amazonaws.com/gumroad-jd:latest
docker push 711112755670.dkr.ecr.us-east-1.amazonaws.com/gumroad-jd:latest

image URI:
711112755670.dkr.ecr.us-east-1.amazonaws.com/gumroad-jd:latest

created AWS Secret
    name: rails-master-key
    arn: arn:aws:secretsmanager:us-east-1:711112755670:secret:rails-master-key-8wP0FT

task execution role
    key in task definition json: executionRoleArn

    IAM Role: ecsTaskExecutionRole
        https://us-east-1.console.aws.amazon.com/iam/home?region=us-east-1#/roles/details/ecsTaskExecutionRole?section=permissions
    arn: arn:aws:iam::711112755670:role/ecsTaskExecutionRole

    how to use in task def json
        https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#execution_role_arn
    Required IAM permissions, example policy
        https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html#task-execution-secrets
    Retrieve Secrets Manager secrets through environment variables
        https://docs.aws.amazon.com/AmazonECS/latest/developerguide/secrets-envvar-secrets-manager.html#secrets-envvar-secrets-manager-task-definition

    added policy "permission-to-get-secret-rails-master-key"

Task stopped at: 2024-03-01T23:36:39.977Z
ResourceInitializationError: unable to pull secrets or registry auth: execution resource retrieval failed:
unable to retrieve secret from asm: service call has been retried 5 time(s): failed to fetch secret
arn:aws:secretsmanager:us-east-1:711112755670:secret:rails-master-key-8wP0FT from secrets manager:
RequestCanceled: request context canceled caused by: context deadline exceeded.
Please check your task network configuration.

https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#network_mode
"For the Fargate launch types, when the network mode is awsvpc, the task is allocated an elastic network interface,
and you must specify a NetworkConfiguration when you create a service or run a task with the task definition.
For more information, see Fargate Task Networking. The awsvpc network mode offers the highest networking
performance for containers because they use the Amazon EC2 network stack. Exposed container ports are mapped
directly to the attached elastic network interface port. Because of this, you can't use dynamic host port mappings.

Task networking for tasks on Fargate
    https://docs.aws.amazon.com/AmazonECS/latest/developerguide/fargate-task-networking.html



Trying to assume role ecsTaskExecutionRole to see if it can retrieve secrets
ref: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-role.html

Added the following section to ~/.aws/config:

[profile X]
role_arn = arn:aws:iam::711112755670:role/ecsTaskExecutionRole
source_profile = AdministratorAccess-711112755670

$ aws --profile X secretsmanager get-secret-value --secret-id rails-master-key

An error occurred (AccessDenied) when calling the AssumeRole operation: User:
arn:aws:sts::711112755670:assumed-role/AWSReservedSSO_AdministratorAccess_71349724b263e8dd/gumroad is not
authorized to perform: sts:AssumeRole on resource: arn:aws:iam::711112755670:role/ecsTaskExecutionRole


try a really simple image
that allows me to ssh into it
simplesshd:latest
aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 711112755670.dkr.ecr.us-east-1.amazonaws.com
docker tag simplesshd:latest 711112755670.dkr.ecr.us-east-1.amazonaws.com/simplesshd:latest
docker push 711112755670.dkr.ecr.us-east-1.amazonaws.com/simplesshd:latest

ResourceInitializationError: unable to pull secrets or registry auth: execution resource retrieval failed:
unable to retrieve ecr registry auth: service call has been retried 3 time(s): RequestError: send request
failed caused by: Post "https://api.ecr.us-east-1.amazonaws.com/": dial tcp 44.213.79.86:443: i/o timeout.
Please check your task network configuration.


Mar 2 11:30am
giving up on setting up ECS myself, will try AWS Copilot CLI

AWS Copilot CLI docs
    https://aws.github.io/copilot-cli/docs/overview/

Install
curl -Lo copilot https://github.com/aws/copilot-cli/releases/latest/download/copilot-linux && chmod +x copilot && sudo mv copilot /usr/local/bin/copilot && copilot --help
... on EC2

installed copilot locally
following the first app tutorial
    https://aws.github.io/copilot-cli/docs/getting-started/first-app-tutorial/
for Step 1
    add the followiong section to /home/desm/.aws/credentials:
    (obtained from web interface)
        [default]
        aws_access_key_id=
        aws_secret_access_key=
        aws_session_token=


To deploy I've chosen:
    use AWS Copilot
        https://aws.github.io/copilot-cli/docs/overview/
    use GitHub Actions
        https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-amazon-elastic-container-service
        https://github.com/actions/starter-workflows



CNAME www.gumroad.jacquesdesmarais.dev proxy-ssl.webflow.com
A     app.gumroad.jacquesdesmarais.dev 50.16.81.26

A     www.gumroad.local.jacquesdesmarais.dev 192.168.0.12
A     app.gumroad.local.jacquesdesmarais.dev 192.168.0.12

test env (local)
staging env
production env

${SvcName}.${EnvName}.${AppName}.${DomainName}
    ref: https://aws.github.io/copilot-cli/docs/developing/domain/

staging:
    www.staging.gumroad.jacquesdesmarais.dev
    app.staging.gumroad.jacquesdesmarais.dev

production:
    www.gumroad.jacquesdesmarais.dev
    app.gumroad.jacquesdesmarais.dev


Mar 4 2024
----------
create a new env called "staging"
    https://www.staging.sample.jacquesdesmarais.dev
    https://app.staging.sample.jacquesdesmarais.dev
        slogin -lroot app-nlb.staging.sample.jacquesdesmarais.dev

    add MySQL


Mar 5 2024
----------

# to deploy "app" to staging:
cd ./server
start=`date`; RAILS_MASTER_KEY=$(cat ./config/master.key) copilot deploy --name app --env staging; echo $start; date

### # to deploy "app" to production:
### cd ./server
### start=`date`; RAILS_MASTER_KEY=$(cat ./config/master.key) copilot deploy --name app --env production; echo $start; date


# How the "production" env was created:

$ copilot env init
Environment name: production
ok (accept defaults)

$ copilot env deploy --name production
ok

$ start=`date`; copilot deploy --name www --env production; echo $start; date
ok (about 10 minutes)

# switched to simpler "nginx" container
$ start=`date`; RAILS_MASTER_KEY=$(cat config/master.key) copilot deploy --name app --env production; echo $start; date
ok (about 15 minutes)

# to deploy:
$ start=`date`; RAILS_MASTER_KEY=$(cat server/config/master.key) copilot deploy --name app --env staging; echo $start; date ; notify-gmail.sh "$start - $(date)"
$ start=`date`; RAILS_MASTER_KEY=$(cat server/config/master.key) copilot deploy --name app --env production; echo $start; date ; notify-gmail.sh "$start - $(date)"

# to deploy both "www" and "app":
start=`date`; RAILS_MASTER_KEY=$(cat server/config/master.key) copilot deploy --name www --name app --env production; echo $start; date ; notify-gmail.sh "$start - $(date)"


Mar 7
to deploy using AWS copilot:

step 1: temporarily remove the 'copilot' dir

step 2:
$ copilot app init --domain jacquesdesmarais.dev
Use existing application: No
Application name: gumroad

step 3:
$ copilot init
answer interactive questions as follows:
    Workload type: Static Site
    Service name: www
    Source(s): webflow/export
    Deploy?: yes
    Environment name: staging

step 4:
update 'copilot/www/manifest.yml' to contain the environments.production.http.alias of 'www.gumroad.jacquesdesmarais.dev'

$ copilot init --app gumroad --deploy --env production
answer interactive questions as follows:
    Workload type: Static Site
    Service name: www

step 5:
add storage to "staging"
$ copilot storage init
answer interactive questions as follows:
    Storage type: Aurora Serverless
    Storage resource name: app-db
    Lifecycle:  No, the storage should be created and deleted at the environment level
    Database engine: MySQL
    Initial database name: appserver_staging

Recommended follow-up actions:
  - Run `copilot env deploy` to deploy your environment storage resources. <---------------------- do this
  - Update the manifest for your "www" workload: <------------------------------------------------ DONT do this yet. We will want 'app' to have access to the database, not 'www'
```
network:
  vpc:
    security_groups:
      - from_cfn: ${COPILOT_APPLICATION_NAME}-${COPILOT_ENVIRONMENT_NAME}-appdbSecurityGroup
secrets:
  DB_SECRET:
    from_cfn: ${COPILOT_APPLICATION_NAME}-${COPILOT_ENVIRONMENT_NAME}-appdbAuroraSecret
```
  - Run `copilot svc deploy --name www` to deploy the workload so that www has access to app-db storage. <---------- DONT do this

$ copilot env deploy --name staging

